<snippet>
	<content><![CDATA[
const int MAXN=1e5+5;
const int INF = 1e9+7;
#define pb push_back

int n,m,scc,visited[MAXN];
vector<int> adj[2][MAXN],comp[MAXN],dfn;

void dfs(int u,int t,int p=-1){
	visited[u]=1;
	if(t==1) comp[scc].pb(u);
	for(auto v: adj[t][u]){
		if(!visited[v]) dfs(v,t,u);
	}
	if(t==0) dfn.push_back(u);
}

void kosaraju (){
	for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i,0);
        }
    }
    memset(visited,0,sizeof(visited));
    for(int i=n-1;i>=0;i--){
    	if(!visited[dfn[i]]){
    		scc++;
    		dfs(dfn[i],1);
    	}
    }
}

// Directed Graph
void solve(){
	cin>>n>>m;
	for(int i=0;i<m;i++){
		int u,v;
		cin>>u>>v;
		adj[0][u].push_back(v);
		adj[1][v].push_back(u);
	}
	kosaraju();
	cout<<scc<<endl;
	for(int i=1;i<=scc;i++){
		for(auto x: comp[i]) cout<<x<<" ";
		cout<<endl;
	}
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>kosaraju</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
