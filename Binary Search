#include<bits/stdc++.h>
using namespace std;

template<typename... T>
void see(T&... args) { ((cin >> args), ...);}
template<typename... T>
void put(T&&... args) { ((cout << args << " "), ...);}
template<typename... T>
void putl(T&&... args) { ((cout << args << " "), ...); cout<<'\n';}
#define seea(a,x,y) for(int i=x;i<y;i++){cin>>a[i];}
#define inputv(v,n) for(int i=0;i<n;i++){int x; cin>>x; v.push_back(x);}
#define outputv(v,n) for(int i=0;i<n;i++){cout<<v[i]<<" ";}
#define sees(s,n) for(int i=0;i<n;i++){int x; cin>>x; s.insert(x);}
#define all(x) x.begin(),x.end()
#define rep(i,a,b) for (int i=a; i<b; ++i)
#define rev(i,a,b) for (int i=a; i>b; --i)
#define pb push_back
#define ar array
#define sz size
#define rsz resize
typedef long long int ll;
typedef pair<int,int> pi;
typedef pair<int,ll> pl;
typedef vector<int> vi;
typedef vector<ll> vl;
const int MAXN=2e5+5;
const ll INF = LLONG_MAX;
const int MOD=1e9+7;

double check(double x,int n){
    double y=x;
    while(n>1){
        y*=x;
        n--;
    }
    return y;
}

double findNthRootOfM(int n, int m) {
    double low = 1.0,high = m;
    double eps = 1e-6;
    while(high>low+eps){
        double mid = low +(high-low)/2.0;
        double x = check(mid,n);
        if(x>=m) high = mid;
        else low = mid;
    }
    return low;
}

//we have a partition so that the left and right have different properties
//the low will move next;
int singleNonDuplicate(vector<int>& nums) {
    int n = nums.size();
    int low = 0,high = n-2;
    while(low<=high){
        int mid = low+((high-low)>>1);
        if(mid%2==0){
            if(nums[mid]==nums[mid+1]) low=mid+1;
            else high = mid-1;
        }else{
            if(nums[mid]==nums[mid+1]) high=mid-1;
            else low = mid+1;
        }
    }
    return nums[low];
}

int search(vector<int>& nums, int target) {
    int n=nums.size();
    int low=0,high=n-1;
    while(low<=high){
        int mid = low +((high-low)>>1);
        putl(low,high,mid);
        if(nums[mid]==target) return mid;
        if(nums[low]<=nums[mid]){
            if((nums[mid]>=target)&&(nums[low]<=target)) high=mid-1;
            else low=mid+1;
        }else{
            if((nums[mid]<=target)&&(nums[high]>=target)) low=mid+1;
            else high=mid-1;
        }
    }
    return -1;
}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    if(nums1.size()>nums2.size()) nums1.swap(nums2);
    int n=nums1.size(),m=nums2.size();

    int low=0,high=n,final=(m+n+1)/2;
    while(low<=high){
        int mid = low+((high-low)>>1);
        int remain = final-mid;

        int l1 = (mid==0) ? INT_MIN : nums1[mid-1];
        int l2 = (remain==0) ? INT_MIN : nums2[remain-1];
        int r1 = (mid==n) ? INT_MAX : nums1[mid];
        int r2 = (remain==m) ? INT_MAX : nums2[remain];

        if((l1<=r2) && (l2<=r1)) {
            if((m+n)%2 != 0)
                return max(l1,l2);
            else 
                return (max(l1,l2)+min(r1,r2))/2.0;
        }
        else if(l1>r2) high = mid-1;
        else low = mid+1;

    }
    return 0.0;
}

int kthElement(int arr1[], int arr2[], int n, int m, int k){
    if(n>m) return kthElement(arr2,arr1,m,n,k);
    int low = max(0,k-m),high = min(k,m);
    while(low<=high){
        int mid = low +((high-low)>>1);
        int remain = k-mid;

        int l1 = (mid==0) ? INT_MIN : arr1[mid-1];
        // putl(l1,mid-1,"l1");
        int l2 = (remain==0) ? INT_MIN : arr2[remain-1];
        // putl(l2,remain-1,"l2");
        int r1 = (mid==n) ? INT_MAX : arr1[mid];

        int r2 = (remain==m) ? INT_MAX : arr2[remain];
        // putl(low,high,mid,remain,"last");        
        if((l1<=r2) && (l2<=r1)){
            return max(l1,l2);
        }else if(l1>r2) high =mid-1;
        else low = mid+1;
    }
    return 0;
}

bool check(vector<int> &A,int B,int x){
    int i=0,n=A.size(),ans=0;
    while(i<n){
        int temp = 0;
        while((i<n)&&((temp+A[i])<=x)){
            temp+=A[i];
            i++;
        }
        // cout<<temp<<" "<<i<<" ";
        if(temp!=0) ans++;
        if(A[i]>x) return true;
    }
    // cout<<ans<<" ans"<<endl;
    if(ans>B) return true;
    else return false;
}

int books(vector<int> &A, int B) {
    int n=A.size();
    if(n<B) return -1;
    int high=0,low=0;
    for(int i=0;i<n;i++){
        high+=A[i];
        low = max(low,A[i]);
    }
    while(low<=high){
        int mid = low+((high-low)>>1);
        // putl(low,high,mid);
        if(check(A,B,mid)){
            low = mid+1;
        }else{
            high = mid-1;
        }
    }
    return low;
}

int biotonic_point(vector<int> &A){
    int n=A.size(),low=0,high=n-1;
    while(low<=high){
        int mid = low+((high-low)>>1);
        if((A[mid]>A[mid-1])&&(A[mid]>A[mid+1])) return mid;
        if((A[mid]>A[mid-1])&&(A[mid]<A[mid+1])){
            low = mid+1;
        }else high = mid-1;
    }
    return -1;
}

int binary_search(vector<int> &A,int low,int high,bool check,int target){
    while(low<=high){
        int mid = low + ((high-low)>>1);
        if(A[mid]==target) return mid;
        if(A[mid]>target){
            if(check) high = mid-1;
            else low = mid+1;
        }else{
            if(check) low = mid+1;
            else high = mid-1;
        }
    }
    return -1;
}

int biotonic_search(vector<int> &A, int B) {
    int n= A.size();
    int point = biotonic_point(A);
    if((point!=-1)&&(A[point]==B)) return point; 
    int a = binary_search(A,0,point-1,true,B);
    int b = binary_search(A,point+1,n-1,false,B);
    if(a==-1){
        if(b==-1) return -1;
        else return b;
    }else{
        return a;
    }

}

int elementsLesserThanB(vector<int> &A, int B) {
    int n=A.size(),low = 0,high = n-1;
    while(low<=high){
        int mid = low + ((high-low)>>1);
        if(A[mid]>B) high=mid-1;
        else low = mid+1;
    }
    return low;
}

bool checkWood(vector<int> &A,int height,int target){
    int temp=0,n=A.size();
    for(int i=0;i<n;i++){
        if(A[i]<=height) continue;
        else{
            temp+=A[i]-height;
        }
    }
    if(temp>=target) return true;
    else return false;
}

int cuttingWood(vector<int> &A, int B) {
    int n= A.size(),low=0,high=0;
    for(auto x:A){
        high = max(high,x);
    }
    while(low<=high){
        int mid = low+((high-low)>>1);
        if(checkWood(A,mid,B)){
            low = mid+1;
        }else{
            high = mid-1;
        }
    }
    return high;
}

bool shipcheck(vector<int> &A,int B,int x){
    int i=0,n=A.size(),ans=0;
    while(i<n){
        int temp = 0;
        while((i<n)&&((temp+A[i])<=x)){
            temp+=A[i];
            i++;
        }
        cout<<temp<<" "<<i<<" "<<endl;
        if(temp!=0) ans++;
        // if(A[i]>x) return true;
    }
    cout<<ans<<" ans"<<endl;
    if(ans>B) return true;
    else return false;
}


int shipping(vector<int> &A, int B) {
    int n=A.size();
    int high=0,low=0;
    for(int i=0;i<n;i++){
        high+=A[i];
        low = max(low,A[i]);
    }
    while(low<=high){
        int mid = low+((high-low)>>1);
        putl(low,high,mid);
        if(shipcheck(A,B,mid)){
            low = mid+1;
        }else{
            high = mid-1;
        }
    }
    return low;   
}


void solve(){
    vector<int> A = {3, 4, 17, 8, 8, 7, 8, 9, 13, 11, 10, 4};
    putl(shipping(A,14));
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int t=1;
    while(t--){
        solve(); 
    }
    return 0;
}
