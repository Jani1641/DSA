#include<bits/stdc++.h>
using namespace std;

template<typename... T>
void see(T&... args) { ((cin >> args), ...);}
template<typename... T>
void put(T&&... args) { ((cout << args << " "), ...);}
template<typename... T>
void putl(T&&... args) { ((cout << args << " "), ...); cout<<'\n';}
#define seea(a,x,y) for(int i=x;i<y;i++){cin>>a[i];}
#define inputv(v,n) for(int i=0;i<n;i++){int x; cin>>x; v.push_back(x);}
#define outputv(v,n) for(int i=0;i<n;i++){cout<<v[i]<<" ";}
#define sees(s,n) for(int i=0;i<n;i++){int x; cin>>x; s.insert(x);}
#define all(x) x.begin(),x.end()
#define rep(i,a,b) for (int i=a; i<b; ++i)
#define rev(i,a,b) for (int i=a; i>b; --i)
#define pb push_back
#define ar array
typedef long long int ll;
typedef pair<int,int> pi;
typedef pair<int,ll> pl;
typedef vector<int> vi;
typedef vector<ll> vl;
const int MAXN=2e5+5;
const ll INF = LLONG_MAX;
const int MOD=1e9+7;

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() : val(0), left(nullptr), right(nullptr) {}
	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
	TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

// struct Node {
// 	int key;
// 	struct Node* left;
// 	struct Node* right;
// 	Node(int x){
// 		key =x;
// 		left =NULL;
// 		right = NULL;
// 	}
// };



// TreeNode* lca(TreeNode* node,TreeNode* p,TreeNode* q){
//     if(!node) return NULL;
//     putl(node->val);
// 	if((p->val<=node->val)&&(node->val<=q->val)) return node;
// 	if(node->val>p->val) return lca(node->left,p,q);
// 	else return lca(node->right,p,q);
// }

// TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
// 	if(!root) return NULL;
// 	if(p->val > q->val) swap(p,q);
// 	TreeNode* ans = lca(root,p,q); 
// 	return ans;
// }

// void dfs(Node* node){
// 	if(node==NULL) return;
// 	cout<<node->key<<" ";
// 	dfs(node->left);
// 	dfs(node->right);
// }




// Node* build(int &i,vector<int> &preorder,int ub){
// 	if(i>=preorder.size()) return NULL;
// 	if(preorder[i]>=ub) return NULL;
// 	Node* node = new Node(preorder[i++]);
// 	node->left=build(i,preorder,node->key);
// 	node->right = build(i,preorder,ub);
// 	return node;
// }

// Node* bstFromPreorder(vector<int>& preorder) {
// 	int i=0;
// 	return build(i,preorder,INT_MAX);
// }

// Node* predecessor(Node* curr,int key){
// 	if(!curr) return NULL;
// 	Node* ans=NULL;
// 	while(curr){
// 		if(curr->key>=key){
// 			curr=curr->left;
// 		}else{
// 		    ans=curr;
// 			curr=curr->right;
// 		}
// 	}
// 	return ans;
// }
// Node* successor(Node* curr,int key){
// 	if(!curr) return NULL;
// 	Node* ans=NULL;
// 	while(curr){
// 		if(curr->key <= key){
// 			curr= curr->right;
// 		}else{
// 			ans=curr;
// 			curr=curr->left;
// 		}
// 	}
// 	return ans;
// }
// void findPreSuc(Node* root, Node*& pre, Node*& suc, int key){
// 	pre = predecessor(root,key);
// 	suc = successor(root,key);
// }
// void dfs2(int &i,int & ans,TreeNode* node,int k){
// 	if(!node) return;
// 	dfs2(i,ans,node->left,k);
// 	i++;
// 	if(i==k) ans=node->val;
// 	dfs2(i,ans,node->right,k)
// }

// int kthSmallest(TreeNode* root, int k) {
// 	int ans,i=0;
// 	df2(i,ans,root,k);
// 	return ans;        
// }

// void dfs2(int &i,int & ans,Node* node,int k){
// 	if(!node) return;
// 	dfs2(i,ans,node->right,k);
// 	i++;
// 	if(i==k) ans=node->data;
// 	dfs2(i,ans,node->left,k);
// }

// int kthLargest(Node *root, int K){
// 	int ans,i=0;
// 	dfs2(i,ans,root,k);
// 	return ans; 
// }

// class BSTIterator1 {
// public:
// 	stack<int> st;
// 	TreeNode* curr;
//     BSTIterator(TreeNode* root) {
//         TreeNode* node = new TreeNode(-1);
//         while(root){
//         	st.push(root);
//         	root=root->left;
//         }
//     }
    
//     int next() {
//     	TreeNode* root;
//         curr=st.top();
//         s.pop();
//         root=curr->right;
//         while(root){
//         	st.push(root);
//         	root=root->left;
//         }
//         return curr->val;
//     }
    
//     bool hasNext() {
//         return !st.empty()
//     }
// };
// class BSTIterator {
// public:
// 	stack<int> st;
// 	TreeNode* curr;
//     BSTIterator(TreeNode* root) {
//         TreeNode* node = new TreeNode(-1);
//         while(root){
//         	st.push(root);
//         	root=root->right;
//         }
//     }
    
//     int next() {
//     	TreeNode* root;
//         curr=st.top();
//         s.pop();
//         root=curr->left;
//         while(root){
//         	st.push(root);
//         	root=root->right;
//         }
//         return curr->val;
//     }
    
//     bool hasNext() {
//         return !st.empty()
//     }
// };

// bool findTarget(TreeNode* root, int k) {
// 	BSTIterator right = new BSTIterator(root);
// 	BSTIterator1 left = new BSTIterator1(root);
// 	int u = left.next(),v=right.next();
// 	while(1){
// 		if(u>v) break;
// 		if(u+v>k){
// 			u=left.next();
// 		}else if(u+v<k){
// 			v=right.next();
// 		}else return true;
// 	}
// 	return false;
// }

struct jani{
	int ans,maxi,mini,sum;
	jani(int a,int b,int c,int d,int e){
		ans=a;maxi=c;mini=d;sum=e;
	}
};
jani* zeroans = new jani(0,0,INT_MIN,INT_MAX,0);
jani* maxSum (TreeNode* node){
	if(!root) return zeroans;
	jani* left = maxSumBST(root->left);
	jani* right = maxSumBST(root->right);
	int sum=left->size+right->size+node->val;
	if((node->val>left->maxi)&&(node->val<right->min)){
		return new jani(sum,right->maxi,left->mini,sum);
	}else{
		return new jani(max(left->sum,right->sum),INT_MAX,INT_MIN,sum);
	}
}

int maxSumBST(TreeNode* root) {
	jani * sol = maxSum(root);
	return sol->ans;
}

void solve(){
	vector<int> preorder ={6,2,0,4,3,5,8,7,9};
	Node* ans = bstFromPreorder(preorder);
	// dfs(ans);
	Node* a = successor(ans,4);
	putl(a->key);
	// TreeNode* a = ans->left;
	// TreeNode* b = ans->left->right;
	// putl(a->val,b->val);
	// TreeNode* c = lowestCommonAncestor(ans,a,b);
	// putl(c->val);
}


int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	int t=1;
	while(t--){
		solve();
	}
	return 0;
}
