
int dp[MAXN];

int helper(int n){
    if(n<0) return 0;
    if(dp[n]!=-1) return dp[n];
    else{
        if((n==1)||(n==0)) return dp[n]=1;
        else return dp[n]=helper(n-1)+helper(n-2);
    }
}

void solve(){
    int n;
    see(n);
    fill_n(dp,n+1,-1);
    for(int i=0;i<=n;i++){
        if((i==0)||(i==1)) dp[i]=1;
        else{
            dp[i]=dp[i-1]+dp[i-2];
        }
    }
    putl(helper(n));
    return ;
}

vector<int> getRow(int n) {
        vector<int> res(n+1);
        res[0] = res[n] = 1;
        long temp = 1;
        int up = n, down = 1;
        for(int i = 1; i < n; i++) {
            temp = temp * up /down;
            res[i] = temp;
            up--;down++;
        }
        return res;
    }
    
    
Space optimization
	vector<int> getRow(int rowIndex) {
      vector<int> dp(rowIndex+1, 1);
      if(rowIndex <= 1) return dp;
      for(int i = 2; i <= rowIndex; i++) {
          for(int j = i-1; j >= 1; j--) {
              dp[j] = dp[j] + dp[j-1];
          }
      }
      return dp;
  }
  
  
vector<int> getRow(int n) {
    vector<int> res(n+1);
    res[0] = res[n] = 1;
    long temp = 1;
    int up = n, down = 1;
    for(int i = 1; i < n; i++) {
        temp = temp * up /down;
        res[i] = temp;
        up--;down++;
    }
    return res;
}

    vector<int> dp;
    dp.resize(n+1,0);
    int a=-1;
    for(int i=1;i<=n;i++){
         if((i&(i-1)) == 0){
            a++;
            dp[i]=1;
         } 
         else{
            dp[i] = 1+dp[i-(1<<a)];
         }
    }
    return dp ;
    
    
bool isSubsequence(string s, string t) {
      int n=s.length(),m=t.length();
      int i=0,j=0;
      while(j<m){
          if(s[i]==t[j]) i++;
          j++;
      }
      return (i==n) ;
  }
  
vector<int> dp;

int helper(vector<int> &cost,int i){
    if(i<0) return INT_MAX;
    if((i==0)||(i==1)) return dp[i]=0;
    if(dp[i]!=-1) return dp[i];
    return dp[i]=min(helper(cost,i-1)+cost[i-1],helper(cost,i-2)+cost[i-2]);
}

int minCostClimbingStairs(vector<int>& cost) {
    int n=cost.size();
    dp.resize(n+1,-1);
    int ans= helper(cost,n);
    // outputv(dp,dp.size());
    return ans;
}

bool canJump(vector<int>& nums) {
      int i = 0, n = nums.size();
      for(int reach = 0; i < n && i <= reach; i++)
          reach = max(reach, nums[i] + i);
      return i == n;
  }]
  
  

int helper(vector<int> &nums,int x,int n,vector<int> &dp){
    if(x==nums.size()) return dp[x]=0;
    if(dp[x]!=-1) return dp[x];

    int reach=x+nums[x-1],mini=1e9;
    for(int i=x+1;i<=min(reach,n);i++){
        int val=1+helper(nums,i,n,dp);
        mini=min(mini,val);
    }
    return dp[x]=mini;
}


int jump(vector<int>& nums) {
    int n=nums.size();
    vector<int> dp(n+1,-1);
    int ans = helper(nums,1,n,dp);
    return ans;
}       

int n,m;
vector<int> dx = {1,0,-1,0};
vector<int> dy = {0,1,0,-1};

bool check(int x,int y){
    return((x>=0)&&(x<n)&&(y>=0)&&(y<m));
}

int helper(vector<vector<int>>&grid,pair<int,int> present,vector<vector<int>> dp){
    bool a=false;
    int u = present.first,v=present.second;
    if(dp[u][v]!=-1) return dp[u][v];
    int maxi=INT_MIN;
    for(int i=0;i<4;i++){
        if(check(u+dx[i],v+dy[i])&&(grid[u][v]<grid[u+dx[i]][v+dy[i]])){
            a=true;
            maxi=max(maxi,helper(grid,{u+dx[i],v+dy[i]},dp)+1);
        }
    }
    if(!a) return dp[u][v]=1;
    else return dp[u][v]=maxi;
}


void solve(){
    vector<vector<int>> grid = {
        {3,4,5},{3,2,6},{2,2,1}
    };
    n=grid.size();
    m=grid[0].size();
    int maxi=INT_MIN;
    vector<vector<int>> dp(n,vector<int> (m,-1));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            maxi = max(maxi,helper(grid,{i,j},dp));
        }
    }
    cout<<maxi<<endl;
}
#include<bits/stdc++.h>
using namespace std;

template<typename... T>
void see(T&... args) { ((cin >> args), ...);}
template<typename... T>
void put(T&&... args) { ((cout << args << " "), ...);}
template<typename... T>
void putl(T&&... args) { ((cout << args << " "), ...); cout<<'\n';}
#define seea(a,x,y) for(int i=x;i<y;i++){cin>>a[i];}
#define inputv(v,n) for(int i=0;i<n;i++){int x; cin>>x; v.push_back(x);}
#define outputv(v,n) for(int i=0;i<n;i++){cout<<v[i]<<" ";}cout<<"\n";
#define sees(s,n) for(int i=0;i<n;i++){int x; cin>>x; s.insert(x);}
#define all(x) x.begin(),x.end()
#define rep(i,a,b) for (int i=a; i<b; ++i)
#define rev(i,a,b) for (int i=a; i>b; --i)
#define pb push_back
#define ar array
#define sz size
#define rsz resize
typedef long long int ll;
typedef pair<int,int> pi;
typedef pair<int,ll> pl;
typedef vector<int> vi;
typedef vector<ll> vl;
const int MAXN=2e5+5;
const ll INF = LLONG_MAX;
const int MOD=1e9+7;

// int n,m;
// vector<int> dx = {1,0,-1,0};
// vector<int> dy = {0,1,0,-1};

// bool check(int x,int y){
//     return((x>=0)&&(x<n)&&(y>=0)&&(y<m));
// }

// int helper(vector<vector<int>>&grid,pair<int,int> present,vector<vector<int>> dp){
//     bool a=false;
//     int u = present.first,v=present.second;
//     if(dp[u][v]!=-1) return dp[u][v];
//     int maxi=INT_MIN;
//     for(int i=0;i<4;i++){
//         if(check(u+dx[i],v+dy[i])&&(grid[u][v]<grid[u+dx[i]][v+dy[i]])){
//             a=true;
//             maxi=max(maxi,helper(grid,{u+dx[i],v+dy[i]},dp)+1);
//         }
//     }
//     if(!a) return dp[u][v]=1;
//     else return dp[u][v]=maxi;
// }

// int helper(string A,vector<vector<int>> &dp,int i,int j){
//     if(i>j) return 0;
//     if(i==j) return dp[i][j]=1;
//     if(dp[i][j]!=-1) return dp[i][j]; 
//     if(A[i-1]==A[j-1]) return dp[i][j]=2+helper(A,dp,i+1,j-1);
//     else return dp[i][j]=max(helper(A,dp,i+1,j),helper(A,dp,i,j-1));
// }


// int longPalindrome(string A) {
//     int n=A.length();
//     vector<vector<int>> dp(n+1,vector<int> (n+1,-1));
//     // for(int i=0;i<n;i++){
//     //     for(int j=1;(j+i)<=n;j++){
//     //         if(i==0) dp[j][i+j]=1;
//     //         else if(A[j-1]==A[i+j-1]){
//     //             int u=j+1,v=i+j-1;
//     //             if(u>v) dp[j][i+j]=2;
//     //             else dp[j][i+j]=dp[u][v]+2;
//     //         }else{
//     //             dp[j][i+j]=max(dp[j+1][i+j],dp[j][i+j-1]);
//     //         }
//     //     }
//     // }
//     // return dp[1][n];
//     return helper(A,dp,1,n);
// }

// int helper(string A, string B, vector<vector<int>> &dp,int i,int j){
//     if(dp[i][j]!=-1) return dp[i][j];
//     if(i==0) return dp[i][j]=j;
//     else if(j==0) return dp[i][j]=i;
//     else{
//         if(A[i-1]==B[j-1]) return dp[i][j]=helper(A,B,dp,i-1,j-1);
//         int mini=INT_MAX;
//         mini=min(mini,1+helper(A,B,dp,i-1,j));
//         mini=min(mini,1+helper(A,B,dp,i-1,j-1));
//         mini=min(mini,1+helper(A,B,dp,i,j-1));
//         return dp[i][j]=mini;
//     }
// }

// int minDistance(string A, string B) {
//     int m=A.length();
//     int n=B.length();
//     vector<vector<int>> dp(m+1,vector<int> (n+1,-1));
//     for(int i=0;i<=m;i++){
//         for(int j=0;j<=n;j++){
//             if(i==0) dp[i][j]=j;
//             else if(j==0) dp[i][j]=i;
//             else{
//                 if(A[i-1]==B[j-1]) dp[i][j]=dp[i-1][j-1];
//                 else dp[i][j]=min({dp[i-1][j],dp[i-1][j-1],dp[i][j-1]})+1;
//             }
//         }
//     }
//     return dp[m][n];
// }

// int anytwo(string A) {
//     int n=A.length();
//     vector<vector<int>> dp(n+1,vector<int> (n+1,0));
//     for(int i=1;i<=n;i++){
//         for(int j=1;j<=n;j++){
//             if((A[i-1]==A[j-1])&&(i!=j)) dp[i][j]=dp[i-1][j-1]+1;
//             else dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
//         }
//     }
//     return dp[n][n];
// }
// int helper(string A, string B, vector<vector<int>> &dp,int i,int j){
//     if(dp[i][j]!=-1) return dp[i][j];
//     if(j==0) return dp[i][j]=1;
//     else if(i==0) return dp[i][j]=0;
//     else{
//         if(A[i-1]==B[j-1]) return dp[i][j]=helper(A,B,dp,i-1,j)+helper(A,B,dp,i-1,j-1);
//         else return dp[i][j]= helper(A,B,dp,i-1,j);
//     }
// }

// int numDistinct(string A, string B) {
//     int n=A.length(),m=B.length();
//     vector<vector<int>> dp(m+1,vector<int>(n+1,0));
//     dp[0][0]=1;
//     for(int i=0;i<=m;i++){
//         for(int j=1;j<=n;j++){
//             if(i==0) dp[i][j]=1;
//             else{
//                 if(B[i-1]==A[j-1]) dp[i][j]=dp[i][j-1]+dp[i-1][j-1];
//                 else dp[i][j]=dp[i][j-1];
//             }
//         }
//     }
//     return dp[m][n];
// }

// int isMatch(const string A, const string B){
//     int m=A.length(),n=B.length();
//     vector<vector<bool>> dp(m+1,vector<bool> (n+1,false));
//     for(int i=0;i<=m;i++){
//         for(int j=0;j<=n;j++){
//             if((i==0)&&(j==0)) dp[i][j]=true;
//             else if(j==0) dp[i][j]=false;
//             else if((i==0)&&(B[j-1]!='*')) dp[i][j]=false;
//             else if((i==0)&&(B[j-1]=='*')) dp[i][j]=dp[i][j-1];
//             else{
//                 if(A[i-1]==B[j-1]) dp[i][j]=dp[i-1][j-1];
//                 else if(B[j-1]=='*') dp[i][j] = dp[i-1][j]||dp[i-1][j-1]||dp[i][j-1];
//                 else if(B[j-1]=='?') dp[i][j] = dp[i-1][j-1];
//                 else dp[i][j]=false;
//             }
//         }
//     }
//     return dp[m][n];
// }



// bool helper(string A, string B, int m, int n, vector<vector<int>> &dp ){
//     if(dp[m][n]!=-1) return dp[m][n];
//     if((m==0)&&(n==0)) return dp[m][n]=1;
//     else if(n==0) return dp[m][n]=0;
//     else if((m==0)&&(B[n-1]!='*')) return dp[m][n]=0;
//     else if((m==0)&&(B[n-1]=='*')) return dp[m][n]=helper(A,B,m,n-1,dp);
//     else{
//         if(A[m-1]==B[n-1]) {
//             return dp[m][n]=helper(A,B,m-1,n-1,dp);
//         }else if(B[n-1]=='*'){
//             return dp[m][n]=helper(A,B,m-1,n,dp)||helper(A,B,m-1,n-1,dp)||helper(A,B,m,n-1,dp);
//         }else if(B[n-1]=='?'){
//             return dp[m][n]=helper(A,B,m-1,n-1,dp);
//         }else{
//             return dp[m][n]=0;
//         }
//     }
// }


// int isMatch(const string A, const string B) {
//     int m=A.length();
//     int n=B.length();
//     vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
//     int ans=helper(A,B,m,n,dp);
//     for(auto x:dp){
//         for(auto y:x){
//             cout<<y<<" ";
//         }
//         cout<<endl;
//     }
//     return ans;
// }

// bool helper(string A,string B,vector<vector<int>> &dp,int i,int j){
//     if((i==0)&&(j==0)) return true;
//     if(j==0) return false;
//     if(dp[i][j]!=-1) return dp[i][j];
//     if(i==0) return dp[i][j] = (B[j-1]=='*') ? helper(A,B,dp,i,j-2) : false ;

//     if(A[i-1]==B[j-1]) return dp[i][j]=helper(A,B,dp,i-1,j-1);
//     else if(B[j-1]=='.') return dp[i][j]=helper(A,B,dp,i-1,j-1);
//     else if(B[j-1]=='*'){
//         bool a,b;
//         if((B[j-2]==A[i-1])||(B[j-2]=='.')) a= helper(A,B,dp,i-1,j);
//         b=helper(A,B,dp,i,j-2);
//         return dp[i][j]=a||b;
//     }
//     else return dp[i][j]=false;
    
// }

// int isMatch(const string A, const string B) {
//     int m=A.length(),n=B.length();
//     vector<vector<int>> dp(m+1,vector<int> (n+1,-1));
//     return helper(A,B,dp,m,n);
// }

// // int ans(vector<int> &A,int k){

// // }

// vector<int> multiples(int A, int B, int C, int D) {
//     int a=0,b=0,c=0;
//     vector<int> dp(D+1,1);
//     for(int i=1;i<=D;i++){
//         int pa=dp[a]*A,pb=dp[b]*B,pc=dp[c]*C;
//         int mini = min({pa,pb,pc});
//         if(mini==pa){dp[i]=mini,a++;}
//         else if(mini==pb) {dp[i]=mini,b++;}
//         else {dp[i]=mini,c++;}
//     }
//     vector<int> ans;
//     ans.insert(ans.end(),dp.begin()+1, dp.end());
//     return ans;

// }

// int dominoes(int A) {
//     vector<int> a(A+1);
//     vector<int> b(A+1);
//     for(int i=0;i<=A;i++){
//         if(i==0){
//             a[i]=1;
//             b[i]=0;
//         }else if(i==1){
//             a[i]=0;b[i]=1;
//         }else{
//             a[i]=a[i-2]+2*b[i-1];
//             b[i]=a[i-1]+b[i-2];
//         }
//     }
//     return a[A];
// }


// int maxRectangle(vector<vector<int> > &A) {
//     int n=A.size(),m=A[0].size();
//     vector<vector<int>> dp()
// }



void solve(){
    putl(dominoes(6));
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int t=1;
    while(t--){
        solve();
    }
    return 0;
}
