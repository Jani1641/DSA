
string s;
int dp[10][20][2];

int helper(int pos,int cnt,int tight){
	if(pos==s.size()) return cnt;
	if(dp[pos][cnt][tight]!=-1) return dp[pos][cnt][tight];
	int ans=0;
	int lim = (tight) ?  s[pos]-'0' : 9;
	for(int i=0;i<=lim;i++){
		ans+=(helper(pos+1,cnt+(i==1),tight&(lim==i)));
	}
	return dp[pos][cnt][tight]=ans;
}

int countDigitOne(int n) {
	s=to_string(n);
	return helper(0,0,1);
}

void solve(){
	int n;
	cin>>n;
	memset(dp,-1,sizeof(dp));
	cout<<(countDigitOne(n))<<" jani"<<endl;
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int t=1;
    // cin>>t
    while(t--){
        solve();
    }
    return 0;
}



string s;
    int dp[32][3][2];

    int helper(int pos,int st,int tight){
        if(pos==s.size()) return st!=2;
        if(dp[pos][st][tight]!=-1) return dp[pos][st][tight];
        int ans=0;
        int lim = (tight) ?  s[pos]-'0' : 1;
        for(int i=0;i<=lim;i++){
            int new_st;
            if(i==1){
                if(st==0) new_st=1;
                else if(st==1) new_st=2;
                else new_st=2;
            }else{
                if(st==0) new_st=0;
                else if(st==1) new_st=0;
                else new_st=2;
            }
            ans+=(helper(pos+1,new_st,tight&(lim==i)));
        }
        return dp[pos][st][tight]=ans;
    }

    string to_binary(int n){
        string ans="";
        for(int i=30;i>=0;i--){
            if((1<<i)&n) ans+="1";
            else ans+="0";
        }
        return ans;
    }

    int findIntegers(int n) {
        s=to_binary(n);
        memset(dp,-1,sizeof(dp));
        int ans = helper(0,0,1);
        return ans; 
    }
